#!/usr/bin/env bash
###########################################################################
#  Filename   : pre-commit
#  Author     : mitchell
#  Description: Git pre-commit hook
#  Last Update: Fri 31 May 2019 01:32:16 PM CEST
###########################################################################
## Called by "git commit" with no arguments. The hook should exit with
## non-zero status after issuing an appropriate message if it wants to stop
## the commit. Bypass it with the --no-verify option to git-commit.
###########################################################################
##
## 1. Introduction
## 2. Define against
## 3. Do not commit master/develop branch
## 4. Whitespace check and fix
## 5. Check for prohibit words
## 6. Language specific tests
## 7. Summary
##
###########################################################################
##                                FUNCTIONS
###########################################################################
print_ok(){
    printf "%-${TEXT_WIDTH}s${GREEN}%${RESULT_WIDTH}s %s${NC}\n" "  ${TEXT}" "[${STATUS}]"
}

print_nok(){
    printf "%-${TEXT_WIDTH}s${RED}%${RESULT_WIDTH}s %s${NC}\n" "  ${TEXT}" "[${STATUS}]"
    FINAL_STATUS="NOK"
}

print_dubble_line(){
    printf "==================================================================\n"
}

log() {
    printf "\n--- $1 ---\n"
}

###########################################################################
##                             VARIABLE
###########################################################################
## FILES
FILES=$(git status --porcelain | grep "^M" | cut -b4-)
GIT_ROOT="$(git rev-parse --show-toplevel)"
HOOK_DIR="$(git rev-parse --show-toplevel)/.git/hooks"
PYLINT_RCFILE="${HOME}/Desktop/tools/dotfiles/pylintrc"

## WIDTHS
RESULT_WIDTH=19
TEXT_WIDTH=47

## COLORS
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

## OTHER
FINAL_STATUS='OK'

###########################################################################
###  1. INTRODUCTION
###########################################################################
printf "\n"
printf "##################################################################\n"
printf "###          RUNNING PRE-COMMIT GIT HOOK\n"
printf "### Commit with -n to bypass this pre-commit hook\n"
printf "##################################################################\n"
STATUS='PASS'
changed_and_added=$(git diff --name-only --cached)
tracked_changed_but_not_added=$(git diff --name-only)
untracked=$(git ls-files -o --exclude-standard)

## Print changed_and_added
printf "changed_and_added\n"
for file in ${changed_and_added}; do
    printf "${YELLOW}    ${file}${NC}\n"
done

## Print tracked_changed_but_not_added
printf "tracked_changed_but_not_added\n"
for file in ${tracked_changed_but_not_added}; do
    STATUS='FAIL'
    printf "${YELLOW}    ${file}${NC}\n"
done

## Print untracked
printf "untracked\n"
for file in ${untracked}; do
    STATUS='FAIL'
    printf "${YELLOW}    ${file}${NC}\n"
done

printf "##################################################################\n"
printf "##########################  GENERAL  #############################\n"
printf "##################################################################\n"
TEXT='1. Uncommited NEW or MODIFIED files'
if [ "${STATUS}" == "FAIL" ]; then
    print_nok
else
    print_ok
fi

###########################################################################
###  2. GENERAL - DEFINE AGAINST
###########################################################################
## Work out what to diff against
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    ## Initial commit: diff against an empty tree object
    against="$(git hash-object -t tree /dev/null)"
fi

TEXT='2. Against'
STATUS="${against}"
print_ok

###########################################################################
###  3. GENERAL - DO NOT COMMIT TO THE MASTER/DEVELOP BRANCH
###########################################################################
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
TEXT="3. Branch check [${BRANCH}]"
if [ "${BRANCH}" = "master" ] || [ "${BRANCH}" = "develop" ]; then
    STATUS='FAIL'
    print_nok
else
    STATUS='PASS'
    print_ok
fi

###########################################################################
###  4. GENERAL - CHECK FOR PROHIBIT KEYWORDS
###  List all files added to commit excluding the exceptions
###########################################################################

## Keyworkds to be checked
prohibit_words=(DONOTCOMMIT TODO BUG)

## Join keywords array into a single string for grep and remove the
## separator from the start of the string.
keywords_for_grep=$(printf "|%s" "${prohibit_words[@]}")
keywords_for_grep=${keywords_for_grep:1}

## Directories and files to be excluded during search.
exclude_dir_and_ext='\/features\/|\/contrib\/|\/devel\/|\/libraries\/|\/vendor\/|\.info$|\.png$|\.gif$|\.jpg$|\.ico$|\.patch$|\.htaccess$|\.ttf$|\.woff$|\.eot$|\.svg$'

files_changed=$(git diff-index --diff-filter=ACMRT --cached --name-only ${against} -- | egrep -v ${exclude_dir_and_ext})
if [ -n "${files_changed}" ]; then
    for file in ${files_changed} ; do
        for word in "${prohibit_words[@]}"; do
            ## Find debugging function exists in file diff one by one
            pattern="^\+(.*)?$word(.*)?"
            result_for_file=$(git diff --cached ${file} | egrep -x "${pattern}")
            if [ ! -z "${result_for_file}" ]; then
                STATUS=$(git grep -n "${word}" "${file}" | awk '{split($0,a,":"); printf "" a[1] ":" a[2] "\n";}')
            else
                STATUS='NOT FOUND'
            fi

            ## Printing
            TEXT="4. Check [${word}] in [${file}]"
            if [ "${STATUS}" == "NOT FOUND" ]; then
                print_ok
            else
                print_nok
            fi
        done
    done
fi

###########################################################################
##  5. GENERAL - WHITESPACE CHECK AND FIX AUTOMATICALLY
##               will also check for merge conflicts
###########################################################################
## Because otherwise the line is not read correctly...
## BUT SET IT BACK!!!!! OTHERWISE IN BIG TROUBLE!!!
OLD_IFS=${IFS}
IFS="
"

if git diff --check --cached ${against} -- | sed '/^[+-]/d'; then
    STATUS='NOT NEEDED'
else
    STATUS='NEEDED'
fi

## Remove trailing whitespace in modified lines ONLY
for line in $(git diff --check --cached ${against} -- | sed '/^[+-]/d') ; do
    ## Get file name and line number
    file="$(echo ${line} | sed -r 's/:[0-9]+: .*//')"
    line_number="$(echo ${line} | sed -r 's/.*:([0-9]+).*/\1/')"

    ## Since $file in working dir isn't always equal to $file in index,
    ## we backup it; thereby we can add our whitespace fixes without
    ## accidently adding unstaged changes
    backup_file="${file}.working_directory_backup"
    cat "${file}" > "${backup_file}"

    ## Discard unstaged changes in working directory
    git checkout -- "${file}"

    ## Remove trailing whitespace in $file (modified lines only)
    sed -i "${line_number}s/[[:space:]]*$//" "${file}"

    ## To index, so our whitespace changes will be committed
    git add "${file}"

    ## Restore unstaged changes in $file from its working directory
    ## backup, fixing whitespace that we fixed above
    sed "${line_number}s/[[:space:]]*$//" "${backup_file}" > "${file}"
    rm "${backup_file}"

    ## Display the results
    printf "${RED}%-50s\n" "WHITESPACE FIXED [${file}:${line_number}].....FIXED"
    printf "${NC}"
done

## Set back the IFS
IFS=${OLD_IFS}

TEXT='5. Diff check'
print_ok

###########################################################################
###  6. LANGUAGES SPECIFIC TEST STUFF
###########################################################################

printf "##################################################################\n"
printf "##################  LANGUAGE SPECIFIC TESTING  ###################\n"
printf "##################################################################\n"

#######################################################################
## Stash unstaged changes before running tests. Ensure that code that
## isn't part of the prospective commit isn't tested within your
## pre-commit script
#######################################################################
STASH_NAME="pre-commit-$(date +%s)"

## Stash all changes in the working directory so we test only commit files
if git stash save -u -k -q ${STASH_NAME}; then
    printf "${YELLOW}Stashed changes as: ${STASH_NAME}${NC}\n"
    print_dubble_line
fi

#---------------------------------------------------------------------
## (A)dded (C)opied or (M)odified
git diff-index --cached --full-index --diff-filter=ACMRT ${against} | while read -r line; do
    mod="$(echo ${line} |cut -d' ' -f2)"
    sha="$(echo ${line} |cut -d' ' -f4)"
    sts="$(echo ${line} |cut -d' ' -f5)"
    pth="$(echo ${line} |cut -d' ' -f6-)"
    ext="${pth##*.}"
    she=""

    ## Only check shebang on normal and executable files
    if [ "${mod}" = "100644" ] || [ "${mod}" = "100664" ] || [ "${mod}" = "100455" ] || [ "${mod}" = "100755" ]; then
        she="$(head -n1 "${pth}" |awk -F/ '/^#\!/ {print $NF}' |sed 's/^env //g')"
    fi
    cmds=""
    tmp="${TMPDIR:-/tmp}/${$}.${ext}"
    OLD_IFS=${IFS}
    IFS=,

    ## Select linting tool based on extension or shebang
    if [ "${ext}" = "py" ] || [ "${she}" = "python" ]; then
        ##cmds=("flake8","pylint --rcfile=${PYLINT_RCFILE} --errors-only","pytest")
        cmds=("flake8","pylint --rcfile=${PYLINT_RCFILE} --errors-only")
    elif [ "${she}" = "sh" ]; then
        cmds=("shellcheck")
    elif [ "${she}" = "bash" ]; then
        cmds=("bash -n")
    fi

    ## Get contents
    git cat-file -p ${sha} > "${tmp}"

    ###########################################
    ## HERE THE ACTUAL TESTING WILL HAPPEN
    ###########################################
    for cmd in ${cmds[@]} ; do
        if [ -n "${cmd}" ]; then
            tool="$(echo "${cmd}" |cut -d' ' -f1)"
            TEXT="==> [${tool}] for [${pth}] "
        else
            printf "--> No syntax checking for ${pth}\n"
            continue
        fi

        ## Check if requiredtool is available
        if ! which "${tool}" >/dev/null 2>&1; then
            printf "Please install ${tool} for pre-commit syntax checking.\n"
            exit 1
        fi

        ## EXECUTE THE COMMAND WITH TMP FILE
        ########################################
        if eval ${cmd} ${tmp} >> /dev/null; then
            STATUS='OK'
            print_ok
        else
            STATUS='NOK'
            print_nok
        fi
    done

    ## Make sure that the IFS is restored!!
    IFS=${OLD_IFS}

    ## Remove tmp file
    [ -n "${tmp}" ] && rm -f "${tmp}"

    print_dubble_line
done

##-------------------------------------------------------------------------
## Revert stash if changes were stashed to restore working directory files
STASHES=$(git stash list | head -n1)
if [[ "${STASHES}" = *"${STASH_NAME}"* ]]; then
    if git stash pop -q; then
        printf "${GREEN}Reverted stash command${NC}\n"
    else
        printf "${RED}Unable to revert stash command${NC}\n"
    fi
fi
print_dubble_line

###########################################################################
###  7. SUMMARY
###########################################################################
printf "##################################################################\n"
printf "############################  SUMMARY  ###########################\n"
printf "##################################################################\n"

if [ "${FINAL_STATUS}" == "OK" ]; then
    printf "${GREEN}Pre-commit validation Passed!${NC}\n"
    exit 0
elif [ "${FINAL_STATUS}" == "NOK" ]; then
    printf "${RED}Commit Aborted!${NC}\n"
    exit 1
else
    printf "Unknown final status"
    printf "${RED}Commit Aborted!${NC}\n"
    exit 1
fi

###########################################################################
###                             EOF
###########################################################################
